name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting (optional)
        continue-on-error: true
        run: |
          if command -v black &> /dev/null; then
            black --check src/ tests/
          fi

      - name: Run unit tests
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DATABASE_URL: sqlite:///./test.db
        run: |
          pytest tests/ -v --cov=src --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: telegram-imf-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker build -t telegram-imf-bot:test .
          docker run --rm telegram-imf-bot:test python -c "import src.main; print('Import successful')"

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()

    steps:
      - name: Send failure notification
        run: |
          echo "Pipeline failed. Configure Slack/Email notifications here if needed."
